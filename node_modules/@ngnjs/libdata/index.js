// @ngnjs/libdata v1.0.0-alpha.3
// Copyright (c) 2022 Corey Butler
// Released under the MIT License.
const dedupe=array=>Array.from(new Set(array)),force$3=value=>null===value?[]:Array.isArray(value)?value:[value];function nullIf$1(sourceExpression,comparisonExpression=""){try{if(sourceExpression!==comparisonExpression){if(typeof sourceExpression!=typeof comparisonExpression)return sourceExpression;if("string"==typeof sourceExpression&&sourceExpression.trim()!==comparisonExpression.trim())return sourceExpression}return sourceExpression===comparisonExpression?null:sourceExpression}catch(e){throw new Error(`nullIf could not compare '${sourceExpression}' to '${comparisonExpression}'. ${e.message}`)}}function converge$1(){if(arguments.length<2)return null;if(2===arguments.length)return void 0===arguments[1]?null:!0===arguments[0]?nullIf$1(arguments[1]):arguments[1];for(let i=1;i<arguments.length;i++)if(void 0!==arguments[i]&&null!==(arguments[0]?nullIf$1(arguments[i]):arguments[i]))return arguments[i];return null}function coalesceb$1(){return converge$1(!0,...arguments)}function typeOf$1(el){if(void 0===el)return"undefined";if(null===el)return"null";const value=Object.prototype.toString.call(el).split(" ")[1].replace(/[^A-Za-z]/gi,"").toLowerCase();if("function"===value||"function"==typeof el){if(!el.name){const name=coalesceb$1(el.toString().replace(/\n/gi,"").replace(/^function\s|\(.*$/gim,""),"function");return name.indexOf(" ")>=0?"function":name}return coalesceb$1(el.name,"function")}return value.toLowerCase()}var operators=Object.freeze({__proto__:null,typeOf:typeOf$1,converge:converge$1,nullIf:nullIf$1,coalesce:function coalesce$1(){return converge$1(!1,...arguments)},coalesceb:coalesceb$1,getPrimitive:function getPrimitive$1(type,defaultType){switch(type.trim().toLowerCase()){case"number":return Number;case"regex":case"regexp":return RegExp;case"boolean":return Boolean;case"symbol":return Symbol;case"date":return Date;case"array":return Array;case"object":return Object;case"function":return Function;case"string":return String;default:return defaultType}}});function force$2(value){switch(typeOf$1(value)){case"boolean":return value;case"number":return 0!==value;case"string":return"false"!==value.trim().toLowerCase();default:return null!==coalesceb$1(value)}}const force$1=(value,radix=null)=>{try{switch(typeOf$1(value)){case"boolean":return value?1:0;case"number":return value;case"date":return value.getTime();case"string":return null!==radix?parseInt(value,radix):parseFloat(value);default:return NaN}}catch(e){return NaN}};function force(value){if(null===value)return"null";if(void 0===value)return"undefined";switch(typeOf$1(value)){case"string":return value;case"boolean":return value?"true":"false";case"date":return value.toISOString();case"array":return value.join(",");case"object":return JSON.stringify(value);default:return value.name?value.name:value.toString?value.toString():"unknown-"+typeOf$1(value)}}function isSuperSet(mainset,subset){if(subset.size>mainset.size||0===subset.size)return!1;for(const element of subset.values())if(!mainset.has(element))return!1;return!0}function concat(){const args=Array.from(arguments);return new Set(function*(){for(;args.length>0;)yield*args.shift()}())}function intersection(){switch(arguments.length){case 0:return new Set;case 1:return arguments[0]}const mega=concat(...arguments);for(const arg of arguments)for(const value of mega)arg.has(value)||mega.delete(value);return mega}function except(setA){if(arguments.length<2)return arguments[0]||new Set;const base=new Set(setA),args=Array.from(arguments).slice(1);return args.forEach(val=>val.forEach(v=>base.delete(v))),base}function diff(setA,setB){const difference=new Set(setA);for(const el of setB)difference.has(el)?difference.delete(el):difference.add(el);return difference}function equal(){const args=Array.from(arguments),base=args.shift();for(const val of args)if(except(base,val).size>0||except(val,base).size>0)return!1;return!0}var set=Object.freeze({__proto__:null,isSuperSet:isSuperSet,concat:concat,intersection:intersection,except:except,diff:diff,equal:equal,polyfill:function polyfill(){Set.prototype.isSubsetOf=function(subset){return isSuperSet(subset,this)},Set.prototype.isSupersetOf=function(subset){return isSuperSet(this,subset)},Set.prototype.intersection=function(){return intersection(this,...arguments)},Set.prototype.except=function(){return except(this,...arguments)},Set.prototype.diff=function(compare){return diff(this,compare)},Set.prototype.equal=function(){return equal(this,...arguments)},Set.prototype.concat=function(){return concat(this,...arguments)}}});function all(){const properties=new Set(Object.keys(arguments[0]));for(let i=1;i<arguments.length;i++)if(!properties.has(arguments[i]))return!1;return!0}function missing(){const properties=new Set(Object.keys(arguments[0]));return Array.from(diff(properties,new Set(Array.from(arguments).slice(1))))}const serializeArray=data=>"object"==typeof data?serialize(data):data;function serialize(data){const type=typeOf$1(data);if("object"!=typeof data)throw new Error(`Cannot serialize ${type} value (must be an object).`);if("array"===type)return data.map(serializeArray);const result={};for(const[attr,value]of Object.entries(data))if(void 0!==value)switch(typeOf$1(value)){case"object":result[attr]=serialize(value);break;case"array":result[attr]=value.map(serializeArray);break;case"date":result[attr]=value.toISOString();break;case"symbol":case"regexp":result[attr]=value.toString();break;case"weakmap":case"map":result[attr]=serialize(Object.fromEntries(value));break;case"weakset":case"set":result[attr]=Array.from(value);break;case"function":break;default:result[attr]=value}return result}var object=Object.freeze({__proto__:null,all:all,any:function any(){const properties=new Set(Object.keys(arguments[0]));for(let i=1;i<arguments.length;i++)if(properties.has(arguments[i]))return!0;return!1},exactly:function exactly(){const properties=new Set(Object.keys(arguments[0])),args=new Set(Array.from(arguments).slice(1));return equal(properties,args)},require:function require(){if(!all(...arguments))throw new Error(`${arguments[0].constructor.name} is missing the following attributes: ${missing(...arguments).join(", ")}`)},extraneous:function extraneous(){const extras=new Set(Object.keys(arguments[0]));return Array.from(except(extras,new Set(Array.from(arguments).slice(1))))},missing:missing,mixin:function mixin(source=null,dest=null,overwrite=!0){const owfn="function"==typeof overwrite,ow="boolean"==typeof overwrite&&overwrite;source&&dest&&(source="function"==typeof source?source.prototype:source,dest="function"==typeof dest?dest.prototype:dest,Object.getOwnPropertyNames(source).forEach((function(attr){const definition=Object.getOwnPropertyDescriptor(source,attr);(void 0===dest[attr]||ow||owfn&&overwrite(attr,definition))&&Object.defineProperty(dest,attr,definition)})),Object.getOwnPropertyNames(Object.getPrototypeOf(source)).filter(attr=>"constructor"!==attr.trim().toLowerCase()&&void 0===dest[attr]).forEach(attr=>{void 0===Object.getOwnPropertyDescriptor(source,attr)&&"function"==typeof source[attr]&&Object.defineProperty(dest,attr,{get(){return source[attr].apply(this,arguments)}})}),Object.getOwnPropertySymbols(source).forEach(s=>{dest[s]=source[s]}))},serialize:serialize});let crcTable=null;function checksum(str){"object"==typeof str&&(str=JSON.stringify(str)),crcTable=crcTable||function makeCRCTable(){if(null!==crcTable)return crcTable;let c;crcTable=[];for(let n=0;n<256;n++){c=n;for(let k=0;k<8;k++)c=1&c?3988292384^c>>>1:c>>>1;crcTable[n]=c}return crcTable}();let crc=-1;for(let i=0;i<str.length;i++)crc=crc>>>8^crcTable[255&(crc^str.charCodeAt(i))];return((-1^crc)>>>0).toString()}const GUID=()=>{const lut=[];for(let i=0;i<256;i++)lut[i]=(i<16?"0":"")+i.toString(16);const d0=4294967295*Math.random()|0,d1=4294967295*Math.random()|0,d2=4294967295*Math.random()|0,d3=4294967295*Math.random()|0;return lut[255&d0]+lut[d0>>8&255]+lut[d0>>16&255]+lut[d0>>24&255]+"-"+lut[255&d1]+lut[d1>>8&255]+"-"+lut[d1>>16&15|64]+lut[d1>>24&255]+"-"+lut[63&d2|128]+lut[d2>>8&255]+"-"+lut[d2>>16&255]+lut[d2>>24&255]+lut[255&d3]+lut[d3>>8&255]+lut[d3>>16&255]+lut[d3>>24&255]},UUID=()=>globalThis.crypto?([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,c=>(c^globalThis.crypto.getRandomValues(new Uint8Array(1))[0]&15>>c/4).toString(16)):GUID();let fill,CRYPTO=globalThis.crypto;function NANOID(size=21){const bytes=fill(size);let id="";for(;size--;){const n=63&bytes[size];id+=n<36?n.toString(36):n<62?(n-26).toString(36).toUpperCase():n<63?"_":"-"}return id}CRYPTO?fill=size=>CRYPTO.getRandomValues(new Uint8Array(size)):(async()=>{CRYPTO=await import("crypto"),fill=size=>CRYPTO.randomBytes(size)})();const{typeOf:typeOf,converge:converge,nullIf:nullIf,coalesce:coalesce,coalesceb:coalesceb,getPrimitive:getPrimitive}=operators,moduleVersion="1.0.0-alpha.3";export{set as AdvancedSet,GUID,NANOID,UUID,checksum,coalesce,coalesceb,converge,dedupe,force$3 as forceArray,force$2 as forceBoolean,force$1 as forceNumber,force as forceString,getPrimitive,moduleVersion,nullIf,object,typeOf};
//# sourceMappingURL=../libdata-debug/index.js.map
