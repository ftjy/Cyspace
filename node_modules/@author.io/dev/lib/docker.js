import { GET } from './utility.js'
import { execSync as exec } from 'child_process'
import semver from 'semver'
const base = 'https://hub.docker.com/v2'

function semverSort (a, b) {
  if (semver.eq(a, b)) {
    return 1
  } else if (semver.gt(a, b)) {
    return -1
  }

  return 1
}

export function latest (image, runtime = null) {
  return new Promise((resolve, reject) => {
    const runtimes = runtime ? [runtime] : ['base', 'node', 'deno', 'browser']
    const data = new Map()
    const expecting = runtimes.length
    let count = 0

    ;(async () => {
      for (const rt of runtimes) {
        const { body, status } = await GET(`${base}/repositories/${image}${rt}/tags?page_size=500&page=1`)

        if (status === 200) {
          count++
          data.set(rt, JSON.parse(body).results.map(i => i.name).filter(i => i !== 'latest').sort(semverSort))

          if (count === expecting) {
            if (runtime !== null) {
              // console.log(`'${runtime}' -> ${image}`)
              resolve(data.get(runtime).shift())
            } else {
              data.forEach((val, key) => data.set(key, data.get(key).shift()))
              resolve(Object.fromEntries(data))
            }
          }
        }
      }
    })()
  })
}

const RE = /(?<image>[^,:\d]+)(:(?<version>[^,]+))?,(?<id>[^,]+),(?<launched>[^,]+),(?<command>[^,]+)/gi
export async function processes (meta, base = '') {
  const stdout = exec('docker ps -f status=running --format "{{.Image}},{{.ID}},{{.RunningFor}},{{.Command}}"').toString()
  const result = stdout.split('\n').filter(i => i.trim().length > 0).map(i => RE.exec(i).groups).filter(i => i.image.indexOf(meta.flag('image') === 0)) // Use .groups for named values
  return result
  // author/dev-node:14.7.0,d7c5c94aebbc,59 minutes ago,"docker-entrypoint.sâ€¦
}
