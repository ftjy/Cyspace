import fs from 'fs'
import path from 'path'
import { spawnSync as spawn } from 'child_process'
import { __dirname, options } from '../lib/utility.js'
import glob from 'glob'
import chalk from 'chalk'

export default function build (meta) {
  if (!meta.flag('nobuild')) {
    let needsupdate = !fs.existsSync('./.dist')
    if (!needsupdate && !meta.flag('force')) {
      const lastbuild = fs.statSync('./.dist').mtime.getTime()
      const assets = glob.sync('./!(node_modules|test|tests)/*.js')

      if (!needsupdate && fs.existsSync('./package.json') && fs.statSync(path.resolve('./package.json')).mtime.getTime() > lastbuild) {
        needsupdate = true
      } else {
        for (const p of assets) {
          const time = fs.statSync(path.resolve(p)).mtime.getTime()
          if (time > lastbuild) {
            needsupdate = true
            break
          }
        }
      }
    }

    if (meta.flag('force') || needsupdate) {
      if (meta.flag('force')) {
        console.log(chalk.yellow.bold('⚠ Forcing build!\n'))
      }
      const ignored = meta.flag('ignorecircular')
      spawn(`${path.join(__dirname, '../index.js')} build${meta.flag('mode') ? ' --mode ' + meta.flag('mode') : ''}${!meta.flag('dropconsole') ? ' --keepconsole' : ''}${ignored.length > 0 ? ignored.map(i => ` -ic ${i}`).join(' ') : ''}`, options)
    } else {
      console.log(chalk.cyan('⚠ Skipped build (no changes since last build).\n'))
    }
  } else {
    console.log(chalk.cyanBright('✔ Skipped build.\n'))
  }
}
