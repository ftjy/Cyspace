import { Command } from '@author.io/node-shell'
import { container, abort, env, launch, prettyCommand } from '../lib/utility.js'
import flag from '../lib/flags.js'

const BuildCommand = new Command({
  name: 'build',
  description: 'Build a release.',
  flags: {
    runtime: flag.runtime,
    ignorecircular: flag.ignorecircular,
    keepconsole: flag.keepconsole,
    replace: flag.replace,
    external: flag.external,
    buildoption: flag.buildoption,
    pack: {
      description: 'Package the resulting build into a tarball. This is commonly used for preparing a single file for release.',
      alias: 'p',
      type: 'boolean'
    },
    embed: flag.embed
  },
  async handler (meta) {
    const { image, version, command, runtime } = await container(meta, '/utility/build').catch(abort)
    const ignored = meta.flag('ignorecircular')

    if (ignored.length > 0) {
      env(command, `IGNORE_CIRCULAR_DEPENDENCY=${ignored.join(',')}`)
    }

    if (runtime.length > 0) {
      env(command, `RUNTIME=${runtime}`)
    }

    if (meta.flag('external').length > 0) {
      env(command, `EXTERNAL_MODULES=${meta.flag('external').join(',')}`)
    }

    if (!meta.flag('dropconsole')) {
      env(command, 'KEEP_CONSOLE=true')
    }

    if (meta.flag('buildoption')) {
      const RE = /(?<key>[^=:]+)(:|=)(?<value>[^=:]+)/i
      const cfg = {}
      for (const keypair of meta.flag('buildoption')) {
        const { key, value } = RE.exec(keypair).groups
        cfg[key] = isNaN(value) ? (value.toLocaleLowerCase() === 'false' ? false : (value.toLocaleLowerCase() === 'true' ? true : value)) : (value.indexOf('.') >= 0 ? parseFloat(value) : parseInt(value, 10))
      }
      if (Object.keys(cfg).length > 0) {
        env(command, `ROLLUP_CFG=${JSON.stringify(cfg).replace(/("|')/g, '\\$1')}`)
      }
    }

    if (meta.flags.unrecognized.length > 0) {
      command.push(meta.flags.unrecognized.join(' '))
    }

    command.push(`${image}:${version} npm start`)

    launch(command, meta.flag('verbose'), true)

    if (meta.flag('pack')) {
      const pack = await container(meta, '/utility/build/lib').catch(abort)
      const subcommand = pack.command

      subcommand.push(`${image}:${version} node release.js`)

      launch(subcommand, meta.flag('verbose'))
    }
  }
})

export { BuildCommand as default }
