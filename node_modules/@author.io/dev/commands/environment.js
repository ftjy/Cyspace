import { Command } from '@author.io/node-shell'
import { spawn, spawnSync, execSync as exec } from 'child_process'
import { latest } from '../lib/docker.js'
import path from 'path'
import semver from 'semver'

const EnvironmentCommand = new Command({
  name: 'environment',
  alias: 'env',
  description: 'Explore and update the environment.',
  flags: {
    list: {
      alias: ['ls', 'l'],
      description: 'List the available runtimes.',
      type: 'boolean'
    },
    runtime: {
      alias: 'rt',
      description: 'Filter by runtime.',
      type: 'string',
      options: [/node(@.*)?/i, /browser(@.*)?/i, /deno(@.*)?/i]
    },
    update: {
      alias: ['u', 'up'],
      description: 'Update the runtime(s).',
      type: 'boolean'
    },
    rebuild: {
      description: 'Rebuild the environment (or specified runtime) from scratch.',
      type: 'boolean'
    },
    clear: {
      alias: 'rm',
      description: 'Remove all images.',
      type: 'boolean'
    },
    prune: {
      alias: 'p',
      description: 'Remove all but the most current images.',
      type: 'boolean'
    }
  },
  async handler (meta) {
    const runtime = (meta.flag('runtime') || '').split('@')[0].toLowerCase()
    const version = (meta.flag('runtime') || '').split('@').length < 2 ? null : meta.flag('runtime').split('@').pop()
    const image = meta.flag('image') + (runtime === 'manual' ? '' : runtime) + (version === null ? '' : ':' + version)

    let images = exec('docker images --format "{{.Repository}}:{{.Tag}}|{{.CreatedSince}},{{.Size}}"').toString().trim().split('\n').filter(i => {
      return i.indexOf(image) === 0 && i.indexOf('<none>') < 0
    })

    if (meta.flag('prune')) {
      const v = await latest(image)
      const active = images.map(i => /.*\-(\w+):(.*)/i.exec(i.split('|').shift()).slice(1))
        .filter(keypair => {
          if (keypair[1] === 'latest') {
            return true
          }

          return semver.lt(keypair[1], v[keypair[0]])
        })

      active.forEach(item => {
        console.clear()
        console.log(`Pruning ${image}${item[0]}:${item[1]}`)
        console.log((new Array(50)).join('-'))
        spawnSync(`docker rmi ${image}${item[0]}:${item[1]}`, { shell: true, stdio: [0, 1, 2] })
      })

      console.clear()
      console.log(`Pruned ${active.length} image${active.length !== 1 ? 's' : ''}${active.length > 0 ? ':' : '.'}`)
      if (active.length > 0) {
        console.log('  - ' + active.map(i => `${image}${i[0]}:${i[1]}`).join('\n  - '))
      }

      process.exit(0)
    }

    if ((meta.flag('list') || !meta.flag('update')) && (!meta.flag('clear') && !meta.flag('rebuild'))) {
      if (images.length === 0) {
        console.log('No runtimes detected.')
        return
      }

      return console.log('  ' + images.sort().map(i => `${i.split('|')[0]} \tBuilt ${i.split('|')[1].replace(',', '\t')}`).join('\n  '))
    }

    const lrt = await latest(image.split(':').shift()).catch(console.error)

    if (meta.flag('rebuild') || meta.flag('clear')) {
      if (runtime.trim().length === 0) {
        for (const rt of ['base', 'node', 'deno', 'browser']) {
          try {
            const cmd = `${meta.flag('engine')} rmi ${meta.flag('image')}${rt}:${version === null ? lrt[rt] : ''}`
            console.clear()
            console.log(`Executing ${cmd}`)
            console.log((new Array(60)).join('-'))
            exec(cmd, { shell: true, stdio: [0, 1, 2] })
          } catch (e) {}
        }
      } else {
        const cmd = `${meta.flag('engine')} rmi ${meta.flag('image')}${runtime}:${version !== null ? version : lrt[runtime]}`
        console.clear()
        console.log(`Executing ${cmd}`)
        console.log((new Array(60)).join('-'))
        exec(cmd, { shell: true, stdio: [0, 1, 2] })
      }

      if (meta.flag('clear')) {
        console.clear()
        console.log('Environment has been cleared.')
        return
      }
    }

    console.clear()
    const completed = new Set()
    if (runtime.trim().length === 0) {
      for (const rt of ['base', 'node', 'deno', 'browser']) {
        completed.add(rt)
        const cmd = `${meta.flag('engine')} pull ${meta.flag('image')}${rt}:${version === null ? lrt[rt] : version}`
        console.clear()
        console.log(`Executing ${cmd}`)
        console.log((new Array(60)).join('-'))
        exec(cmd, { shell: true, stdio: [0, 1, 2] })
      }
    } else {
      completed.add(runtime.trim())
      const cmd = `${meta.flag('engine')} pull ${image}:${version === null ? lrt[runtime] : version}`
      console.log(`Executing ${cmd}`)
      console.log((new Array(60)).join('-'))
      exec(cmd, { shell: true, stdio: [0, 1, 2] })
    }

    images = exec('docker images --format "{{.Repository}}:{{.Tag}}|{{.CreatedSince}},{{.Size}}"').toString().trim().split('\n').filter(i => {
      return i.indexOf(image) === 0 && i.indexOf('<none>') < 0
    })

    console.clear()
    console.log(`Updated runtimes: ${Array.from(completed).join(', ')}\n\nAvailable:`)
    console.log('  ' + images.sort().map(i => `${i.split('|')[0]} \tBuilt ${i.split('|')[1].replace(',', '\t')}`).join('\n  '))
  }
})

export { EnvironmentCommand as default }
