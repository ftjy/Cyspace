import { Command } from '@author.io/node-shell'
import { launch, abort } from '../lib/utility.js'
import { processes } from '../lib/docker.js'
import chalk from 'chalk'

// TODO: Make an auto-rebuild feature for file changes.
const ShellCommand = new Command({
  name: 'ps',
  description: 'List and manage active dev processes.',
  flags: {
    list: {
      aliases: ['ls', 'l'],
      description: 'List active dev processes.',
      type: 'boolean'
    },
    json: {
      description: 'Return a list of running processes in JSON format. This automatically invokes the list flag.',
      type: 'boolean'
    },
    exit: {
      alias: ['x', 'e'],
      description: 'Exit ALL running dev environments.',
      type: 'boolean'
    },
    kill: {
      alias: 'k',
      description: 'Stop/kill a specific dev environment.',
      allowMultipleValues: true
    }
  },
  async handler (meta) {
    const list = meta.input.trim().length === 0 ? true : meta.flag('list')
    const running = await processes(meta).catch(abort)

    if (running.length === 0 && !meta.flag('json')) {
      return console.log(chalk.dim('No running processes.'))
    }

    const kill = new Set(meta.flag('kill'))
    if (!meta.flag('json') && (kill.size > 0 || meta.flag('exit'))) {
      let cmd
      if (kill.has('all') || meta.flag('exit')) {
        cmd = `docker stop -t 0 ${running.map(i => i.id).join(' ')}`
      } else {
        cmd = `docker stop -t 0 ${running.map(i => i.id).filter(i => kill.has(i)).join(' ')}`
      }
      console.log(chalk.dim.italic(cmd))
      launch(cmd)
    }

    if (meta.flag('json')) {
      return console.log(running.map(i => { const { image, version, id, launched, command } = i; return { image, version, id, launched, command } }))
    } else if (list) {
      console.log('\n' + chalk.bold.yellow('Active Environment' + (running.size !== 1 ? 's' : '') + ':') + chalk.dim.italic(' (Image:version, ID, Created)\n'))
      running.forEach((i, n) => console.log(chalk.dim(`  ${n+1}. `) + chalk.bold(i.image) +chalk.dim(':') + chalk.italic.dim(i.version) + '\t' + chalk.blueBright(i.id) + '\t' + chalk.dim(i.launched)))
      console.log('')
    }
  }
})

export { ShellCommand as default }
