import { Command } from '@author.io/node-shell'
import { spawnSync as spawn } from 'child_process'
import path from 'path'
import fs from 'fs'
import { prompt, abort, mkdirp, options, readJSON, writeJSON, GET } from '../lib/utility.js'

const InitCommand = new Command({
  name: 'init',
  description: 'Initialize a new project, configured with the dev environment defaults.',
  async handler (meta) {
    const dir = path.resolve(await prompt('Project Directory?', './').catch(abort))

    if (fs.existsSync(dir) && dir !== process.cwd()) {
      const ok = await prompt('The directory already exists. Overwrite?', 'n')
      if (ok.trim().toLowerCase() !== 'y') {
        console.log('Aborted')
        return
      }

      fs.rmdirSync(dir, { recursive: true })
    }

    mkdirp(dir)

    options.cwd = dir

    if (!fs.existsSync('.git')) {
      spawn('git init', options)
    }

    spawn('npm init', options)

    if (fs.existsSync(path.join(dir, 'package.json'))) {
      const pkg = readJSON(path.join(dir, 'package.json'))

      pkg.scripts = pkg.scripts || {}
      pkg.scripts.start = 'dev workspace'
      pkg.scripts.test = 'npm run test:node && npm run test:deno && npm run test:browser && npm run report:syntax && npm run report:size'
      pkg.scripts.build = 'dev build'
      pkg.scripts['test:node'] = 'dev test -rt node tests/*.js'
      pkg.scripts['test:deno'] = 'dev test -rt deno tests/*.js'
      pkg.scripts['test:browser'] = 'dev test -rt browser tests/*.js'
      pkg.scripts.manually = 'dev test -rt manual tests/*.js'
      pkg.scripts['report:syntax'] = 'dev report syntax --pretty'
      pkg.scripts['report:size'] = 'dev report size ./.dist/**/*.js ./.dist/**/*.js.map'
      pkg.scripts['report:compat'] = 'dev report compatibility ./src/**/*.js'
      pkg.main = 'src/index.js'
      pkg.type = 'module'
      pkg.private = true
      pkg.devDependencies = pkg.devDependencies || {}
      pkg.devDependencies['@author.io/dev'] = `^${this.shell.version}`
      pkg.standard = {
        globals: [
          'window',
          'globalThis',
          'global',
          'MutationObserver',
          'DOMParser',
          'XMLHttpRequest',
          'FormData',
          'btoa',
          'localStorage',
          'Request',
          'Response',
          'Headers',
          'fetch',
          'Element',
          'HTMLElement',
          'NodeFilter'
        ]
      }

      const year = (new Date()).getFullYear()
      const user = pkg.author || process.env.USER
      const { body, status } = await GET(`https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/${(pkg.license || 'ISC').trim().toLowerCase()}.txt`).catch(abort)
      let license = `Copyright ${year} ${user}. All Rights Reserved.`

      if (status === 200) {
        license = body.split('---\n').slice(2).join('\n')
          .replace(/\[year\]/gi, year)
          .replace(/\[fullname\]/gi, user)
      }

      writeJSON(path.join(dir, 'package.json'), pkg)

      mkdirp(path.join(dir, 'src'))
      mkdirp(path.join(dir, 'tests'))

      fs.writeFileSync(path.join(dir, 'src', 'index.js'), 'function add () {\n  let sum = 0\n\n  for (const arg of arguments) {\n    sum += arg\n  }\n\n  return sum\n}\n\nexport { add as default, add }\n')
      fs.writeFileSync(path.join(dir, 'tests', '01-sanity.js'), `import test from 'tappedout'\nimport add from '/app/.dist/${pkg.name}/index.js'\n\ntest('Summarize', t => {\n  t.ok(add(1, 1, 1) === 3, 'Adds up to 3.')\n  t.end()\n})\n`)
      fs.writeFileSync(path.join(dir, '.npmignore'), 'build\ntest\nexamples\n.*\n*.log\n')
      fs.writeFileSync(path.join(dir, '.gitignore'), '*.log\n_*\n.*\n*.old\nenv.json\n/**//env.json\nnode_modules\n!.github\n!.gitignore\n!.npmignore\n!.dockerignore\n!.*rc\n!.*.yml\n!.npmrc\n/**/browsercompat*.json\n')
      fs.writeFileSync(path.join(dir, 'README.md'), `# ${pkg.name} ${pkg.version}\n\n${pkg.description || 'TODO: Fill me in'}\n`)
      fs.writeFileSync(path.join(dir, 'LICENSE.md'), license)
      
      console.log('Success!')
    } else {
      console.log('Failed: Exited before completion.')
    }
  }
})

export { InitCommand as default }
