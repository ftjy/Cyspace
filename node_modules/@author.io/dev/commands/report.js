import { Command } from '@author.io/node-shell'
import { spawn } from 'child_process'
import path from 'path'
import fs from 'fs'
import { volumes, env, REALPATH, CWD, RUN, prettyCommand, launch } from '../lib/utility.js'
import { latest } from '../lib/docker.js'
import { PassThrough, Writable } from 'stream'

const ReportCommand = new Command({
  name: 'report',
  description: 'Run reports and analytics against the library.',
  commonflags: {
    parser: {
      description: 'The ESLint parser to use.',
      default: 'babel-eslint',
      options: ['default', 'babel-eslint']
    },
    config: {
      alias: ['c', 'cfg'],
      description: 'Path to the configuration (typically package.json).',
      default: 'package.json'
    },
    pretty: {
      description: 'Format the output using the snazzy library.',
      type: 'boolean'
    }
  },
  commands: [{
    name: 'syntax',
    description: 'Test the code syntax using standardjs. If no source flag is specified, this command will scan "src/**/*.js" for sources.',
    arguments: ['source'],
    async handler (meta) {
      const image = meta.flag('image') + 'base'
      const version = await latest(meta.flag('image'), 'base')
      const cmd = [RUN(meta.flag('engine'))]

      // The RUN command adds the -it flag. Remove it
      // if undesired.
      if (!meta.flag('interactive')) {
        cmd[0] = cmd[0].replace(' -it', '')
      }

      cmd.push('-w /utility/test', REALPATH, CWD)

      volumes(cmd, meta.flag('volume'))

      cmd.push(`${image}:${version} node syntax.mjs`)
      cmd.push(` --source /app/${meta.data.source || 'src/**/*.js'}`)
      cmd.push(` --config /app/${meta.flag('config')}`)

      if (meta.flag('parser') !== 'default') {
        cmd.push('--parser ' + meta.flag('parser'))
      }

      if (meta.flag('pretty')) {
        cmd.push('--pretty')
      }

      if (meta.flag('verbose')) {
        cmd.push('--verbose')
      }

      launch(cmd, meta.flag('verbose'))
    }
  }, {
    name: 'size',
    description: 'Identify the raw and compressed sizes of files. Accepts any number of file paths (supports glob patterns).',
    arguments: ['source'],
    async handler (meta) {
      if (meta.flags.unrecognized.length === 0) {
        console.log('Please specify a space-delimited list of files to measure.')
        return
      }

      const image = meta.flag('image') + 'base'
      const version = await latest(meta.flag('image'), 'base')
      const cmd = [RUN(meta.flag('engine')), CWD]

      // The RUN command adds the -it flag. Remove it
      // if undesired.
      if (!meta.flag('interactive')) {
        cmd[0] = cmd[0].replace(' -it', '')
      }

      volumes(cmd, meta.flag('volume'))

      cmd.push(
        `${image}:${version} node /utility/test/size.js`,
        meta.flags.unrecognized.map(f => path.resolve(`/app/${f}`)).join(' ')
      )

      launch(cmd, meta.flag('verbose'))
    }
  }, {
    name: 'compatibility',
    alias: 'compat',
    description: 'Test the compatibility of files within a runtime. Any number of files can be specified. Glob syntax is supported.',
    arguments: ['file'],
    flags: {
      config: {
        alias: ['c', 'rc'],
        description: 'Specfiy the .browserslistrc file to use.',
        type: 'string',
        default: '/utility/build/.browserslistrc'
      },
      environment: {
        alias: ['env', 'e'],
        description: 'Specfiy the environment within the .browserlistsrc file to use in the compatibility test.',
        type: 'string',
        default: 'current'
      }
    },
    async handler (meta) {
      if (meta.flags.unrecognized.length === 0) {
        console.log('Please specify the files(s) to test.')
        return
      }

      const image = meta.flag('image') + 'base'
      const version = await latest(meta.flag('image'), 'base')
      const cmd = [RUN(meta.flag('engine'))]

      // The RUN command adds the -it flag. Remove it
      // if undesired.
      if (!meta.flag('interactive')) {
        cmd[0] = cmd[0].replace(' -it', '')
      }

      cmd.push(REALPATH, CWD)

      volumes(cmd, meta.flag('volume'))

      // Special locations for .eslintrc
      if (fs.existsSync(path.join(process.cwd(), '.eslintrc'))) {
        volumes(cmd, `/app/.eslintrc:/utility/build/.eslintrc`)
      } else if (fs.existsSync(path.join(process.cwd(), 'src/.eslintrc'))) {
        volumes(cmd, `/app/src/.eslintrc:/utility/build/.eslintrc`)
      } else if (fs.existsSync(path.join(process.cwd(), 'test/.eslintrc'))) {
        volumes(cmd, `/app/test/.eslintrc:/utility/build/.eslintrc`)
      } else if (fs.existsSync(path.join(process.cwd(), 'tests/.eslintrc'))) {
        volumes(cmd, `/app/tests/.eslintrc:/utility/build/.eslintrc`)
      }

      env(cmd, `BROWSERSLIST_ENV=${meta.flag('environment')}`)
      env(cmd, `BROWSERSLIST_CONFIG=${meta.flag('config')}`)

      cmd.push(`${image}:${version} eslint -c /utility/build/.eslintrc`)

      meta.flags.unrecognized.forEach(value => cmd.push(path.resolve(`/app/${value}`)))
      cmd.push('--no-ignore')

      if (meta.flag('verbose')) {
        console.log(prettyCommand(cmd))
      }

      const proc = spawn(cmd.join(' '), { shell: true, stdio: [0, 'pipe', process.stderr] })
      const output = new Writable()
      output._write = function (data, ...argv) {
        data = data.toString().replace(/\/app\//g, process.cwd() + '/')
        process.stderr._write(Buffer.from(data), ...argv)
      }
      proc.stdout.pipe(output)
    }
  }]
})

export { ReportCommand as default }
